#lang racket

(require compatibility/mlist)

(define (make-queue)
  (let ((front-ptr (mlist))
        (rear-ptr (mlist)))
    (define (empty-queue?) (null? front-ptr))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue")
          (mcar front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (mcons item (mlist))))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair))
              (else
               (set-mcdr! rear-ptr new-pair)
               (set-rear-ptr! new-pair)))))
    (define (delete-queue!)
      (cond ((empty-queue?)
                    (error "DELETE! called with an empty queue"))
                  (else
                    (set! front-ptr (mcdr front-ptr))
                    front-ptr)))
    (define (print-queue)
      (define (new-print front rear)
        (cond ((eq? front rear)(print (mcar rear))
                               (newline))
              (else
               (print (mcar front))
               (new-print (mcdr front) rear))))
      (if (empty-queue?)
          (mlist)
          (new-print front-ptr rear-ptr)))
    (define (dispatch m)
      (cond ((eq? m `insert-queue!) insert-queue!)
            ((eq? m `delete-queue!) delete-queue!)
            ((eq? m `empty-queue?) empty-queue?)
            ((eq? m `front-queue) front-queue)
            ((eq? m `print-queue) print-queue)
            (else
             (error "Unknown operation" m))))
    dispatch))

(define q (make-queue))

((q `insert-queue!) `a)
((q `print-queue))